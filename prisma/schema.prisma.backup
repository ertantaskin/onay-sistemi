// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  credits       Int       @default(0)
  role          String    @default("user")
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  transactions      Transaction[]
  approvals         Approval[]
  creditTransactions CreditTransaction[]
  couponUsages      CouponUsage[]
  tickets           Ticket[]
  ticketMessages    TicketMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PaymentMethod {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creditPackages CreditPackage[]
}

model CreditPackage {
  id             String    @id @default(cuid())
  name           String
  credits        Int
  price          Float
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@index([paymentMethodId])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Approval {
  id                String   @id @default(cuid())
  userId            String
  iidNumber         String
  confirmationNumber String
  status            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'purchase', 'usage', 'refund', 'coupon'
  amount      Int
  note        String?
  couponId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coupon      Coupon?  @relation(fields: [couponId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([couponId])
}

model CouponUsage {
  id           String   @id @default(cuid())
  couponId     String
  userId       String
  creditAmount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  coupon       Coupon   @relation(fields: [couponId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([couponId])
  @@index([userId])
}

model Coupon {
  id          String      @id @default(cuid())
  code        String      @unique
  value       Int
  minAmount   Int         @default(0)
  maxUses     Int
  usedCount   Int         @default(0)
  expiresAt   DateTime
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  transactions CreditTransaction[]
  usages      CouponUsage[]
}

model SupportCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tickets     Ticket[]
}

model Ticket {
  id          String    @id @default(cuid())
  userId      String
  categoryId  String
  subject     String
  status      String    @default("open") // open, in_progress, closed
  priority    String    @default("normal") // low, normal, high
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime?

  user        User     @relation(fields: [userId], references: [id])
  category    SupportCategory @relation(fields: [categoryId], references: [id])
  messages    TicketMessage[]

  @@index([userId])
  @@index([categoryId])
}

model TicketMessage {
  id          String    @id @default(cuid())
  ticketId    String
  userId      String
  message     String    @db.Text
  isStaff     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  ticket      Ticket    @relation(fields: [ticketId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
} 