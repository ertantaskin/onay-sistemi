generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActiveSession {
  id            String   @id @default(cuid())
  userId        String
  sessionToken  String   @unique
  lastActivity  DateTime @default(now())
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  password           String
  credits            Float               @default(0)
  role               String              @default("user")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isAdmin            Boolean             @default(false)
  billingDetails     Json?               @default("{}")
  accounts           Account[]
  approvals          Approval[]
  couponUsages       CouponUsage[]
  creditTransactions CreditTransaction[]
  orders             Order[]
  sessions           Session[]
  activeSessions     ActiveSession[]
  tickets            Ticket[]
  ticketMessages     TicketMessage[]
  transactions       Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PaymentMethod {
  id             String          @id @default(cuid())
  name           String
  description    String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  provider       String          @default("OTHER")
  type           String          @default("EXTERNAL")
  creditPackages CreditPackage[]
  orders         Order[]         @relation("OrderPaymentMethod")
}

model CreditPackage {
  id              String        @id @default(cuid())
  name            String
  credits         Int
  price           Float
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@index([paymentMethodId])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  type      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Approval {
  id                 String   @id @default(cuid())
  userId             String
  status             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  iidNumber          String
  confirmationNumber String
  user               User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String
  type      String
  amount    Int
  couponId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note      String?
  coupon    Coupon?  @relation(fields: [couponId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([couponId])
}

model CouponUsage {
  id           String   @id @default(cuid())
  couponId     String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creditAmount Int
  coupon       Coupon   @relation(fields: [couponId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([couponId])
  @@index([userId])
}

model Coupon {
  id           String              @id @default(cuid())
  code         String              @unique
  expiresAt    DateTime
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  isActive     Boolean             @default(true)
  maxUses      Int
  minAmount    Int                 @default(0)
  usedCount    Int                 @default(0)
  value        Int
  usages       CouponUsage[]
  transactions CreditTransaction[]
}

model SupportCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     Ticket[]
}

model Ticket {
  id         String          @id @default(cuid())
  userId     String
  categoryId String
  subject    String
  status     String          @default("open")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  closedAt   DateTime?
  priority   String          @default("normal")
  category   SupportCategory @relation(fields: [categoryId], references: [id])
  user       User            @relation(fields: [userId], references: [id])
  messages   TicketMessage[]

  @@index([userId])
  @@index([categoryId])
}

model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isStaff   Boolean  @default(false)
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  stock       Int             @default(0)
  isActive    Boolean         @default(true)
  isFeatured  Boolean         @default(false)
  categoryId  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderItems  OrderItem[]
  guestCartItems GuestCartItem[]
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  featuredProductOrder FeaturedProductOrder?

  @@index([categoryId])
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id              String         @id @default(cuid())
  userId          String
  status          String         @default("pending")
  totalPrice      Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation("OrderPaymentMethod", fields: [paymentMethodId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@index([userId])
  @@index([paymentMethodId])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float
  licenseKey String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model GuestCart {
  id         String          @id
  totalPrice Float
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  items      GuestCartItem[]
}

model GuestCartItem {
  id          String    @id @default(cuid())
  guestCartId String
  productId   String
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  guestCart   GuestCart @relation(fields: [guestCartId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id])

  @@index([guestCartId])
  @@index([productId])
}

model PageContent {
  id          String   @id @default(cuid())
  pageKey     String   @unique
  title       String
  description String
  metaTitle   String?
  metaDesc    String?
  content     Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeaturedProductOrder {
  id           String   @id @default(cuid())
  productId    String   @unique
  displayOrder Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
